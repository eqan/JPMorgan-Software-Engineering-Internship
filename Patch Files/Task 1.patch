From 6cca460333ed957d6e342b46a3864cb4a6ada4d5 Mon Sep 17 00:00:00 2001
From: eqan <eqan.ahmad123@gmail.com>
Date: Sat, 11 Sep 2021 03:04:20 +0500
Subject: [PATCH] Create Patch File

---
 Test/1.png                         |  Bin 0 -> 102350 bytes
 __pycache__/client3.cpython-39.pyc |  Bin 0 -> 1143 bytes
 client3.py                         |   14 +-
 client_test.py                     |    4 +
 ~/.config/nvim/autoload/plug.vim   | 2802 ++++++++++++++++++++++++++++
 5 files changed, 2816 insertions(+), 4 deletions(-)
 create mode 100644 Test/1.png
 create mode 100644 __pycache__/client3.cpython-39.pyc
 create mode 100644 ~/.config/nvim/autoload/plug.vim

diff --git a/Test/1.png b/Test/1.png
new file mode 100644
index 0000000000000000000000000000000000000000..e2ba6c86a07af798675facaa41a64314adef0152
GIT binary patch
literal 102350
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

literal 0
HcmV?d00001

diff --git a/__pycache__/client3.cpython-39.pyc b/__pycache__/client3.cpython-39.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1807229293cc43896cf43bd4d98967f59e6b1402
GIT binary patch
literal 1143
zcmYjQOK%%D5GHrItCcOeZv0epVFLuMfH+Q&9s)IOlh|&7qBWe?p@f13Esm^>SGzJv
z6}2j#)E^=r`&WACr9JW5Q|>+W)LF_lLW1++>~Q9rS=nqZ5nQdmzm$K~3Hhf|K3r%c
zPw|*Pktm{QP6YKl5P|2R2t8+lsX#<36tQ9|`i+R1id7AH0(F&~2Ko<Jf@O$jbVm2d
z+o@<kIBx=dw=(|-qWLPYIlCm6^peg$uDH0B5wQlh(Dw_m4mDVx(Jm7kVpD91HN4w~
zHQ0uYCj?rm4jZruTd>w=n`A~QIr{~zOOU{}T5b`fjTV^&S9d=s`iiuh@3AIwIQev7
z?WnW6o0mPA4@zS@j~_gKuzNNJef~|RzWVhd`<D{Z!*jDDlo*~pJmx8qDPq$i7t~f#
z&>||t_vl67b#|kN(_k8I5f$Ag7i>x^ZOZx#vxz4iexyq^?g5v1&dWZx1K<UK0>yup
z`4|khB|m`zw6y5Nm9%nHW`*T0GPdlUx|%IV>2ao9G}2iQ7P>U2?*mM+O<mN_OKIDY
zi_XTS1znk49Y07H{&n<Sh`OroccPb({r7yY(|uz=o9@AxEcmm*P^#`em{WYN`x?LD
z54+zV{kXSdp*PsEXxMqUGdh3N?d2I1_R;;(xoez&-N%HFe8L#j_{j?sx{A9&brWs9
zDxvFD$<^@~ucI)fisBqKRPYK>p3>U{aSJDR_;+AAVv>~=YQB<Ga#^S=`IzgfcZa^1
zb|7k3F4w}bzgUn4I=TdNeObk8qh?|xge8<wz2a}vbSSeTO(&nds8Ce=uHn-1&k@JY
zU2~6P{hs@0P-;&S9}WFn`0V+f3-=GcZGR$G#yZcl<NF$L){GVLLU+t&LlEqpDGL#6
ztfL%?=*63Zmp?gr=yAG9q>w{MQ^zuFri;+`1RPCWgl$$v)UG4fFmgG9!o~ek52bZX
zgH$f|Q(%0rb%M3|fzZ`YudD8e*q31ZI2HB-n5wbR3#^_DacFb+dIL@74w8iW9kP%G
TNga2%N_oi8x{4SkbTjxLv9BL>

literal 0
HcmV?d00001

diff --git a/client3.py b/client3.py
index f1771c3..d8d0a06 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price)/2;
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if(price_b == 0):
+		return
+	return (price_a/price_b)
 
 # Main
 if __name__ == "__main__":
@@ -54,6 +56,10 @@ if __name__ == "__main__":
 		""" ----------- Update to get the ratio --------------- """
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			prices = {}
+			prices[stock] = price
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
-
-		print ("Ratio %s" % getRatio(price, price))
+		try:
+			print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
+		except:
+			print("An exception occured")
diff --git a/client_test.py b/client_test.py
index af2bf26..a6b1a71 100644
--- a/client_test.py
+++ b/client_test.py
@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,6 +17,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
 
   """ ------------ Add more unit tests ------------ """
diff --git a/~/.config/nvim/autoload/plug.vim b/~/.config/nvim/autoload/plug.vim
new file mode 100644
index 0000000..b6e4cbf
--- /dev/null
+++ b/~/.config/nvim/autoload/plug.vim
@@ -0,0 +1,2802 @@
+" vim-plug: Vim plugin manager
+" ============================
+"
+" Download plug.vim and put it in ~/.vim/autoload
+"
+"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
+"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
+"
+" Edit your .vimrc
+"
+"   call plug#begin('~/.vim/plugged')
+"
+"   " Make sure you use single quotes
+"
+"   " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
+"   Plug 'junegunn/vim-easy-align'
+"
+"   " Any valid git URL is allowed
+"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'
+"
+"   " Multiple Plug commands can be written in a single line using | separators
+"   Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
+"
+"   " On-demand loading
+"   Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
+"   Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
+"
+"   " Using a non-default branch
+"   Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
+"
+"   " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
+"   Plug 'fatih/vim-go', { 'tag': '*' }
+"
+"   " Plugin options
+"   Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
+"
+"   " Plugin outside ~/.vim/plugged with post-update hook
+"   Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
+"
+"   " Unmanaged plugin (manually installed and updated)
+"   Plug '~/my-prototype-plugin'
+"
+"   " Initialize plugin system
+"   call plug#end()
+"
+" Then reload .vimrc and :PlugInstall to install plugins.
+"
+" Plug options:
+"
+"| Option                  | Description                                      |
+"| ----------------------- | ------------------------------------------------ |
+"| `branch`/`tag`/`commit` | Branch/tag/commit of the repository to use       |
+"| `rtp`                   | Subdirectory that contains Vim plugin            |
+"| `dir`                   | Custom directory for the plugin                  |
+"| `as`                    | Use different name for the plugin                |
+"| `do`                    | Post-update hook (string or funcref)             |
+"| `on`                    | On-demand loading: Commands or `<Plug>`-mappings |
+"| `for`                   | On-demand loading: File types                    |
+"| `frozen`                | Do not update unless explicitly specified        |
+"
+" More information: https://github.com/junegunn/vim-plug
+"
+"
+" Copyright (c) 2017 Junegunn Choi
+"
+" MIT License
+"
+" Permission is hereby granted, free of charge, to any person obtaining
+" a copy of this software and associated documentation files (the
+" "Software"), to deal in the Software without restriction, including
+" without limitation the rights to use, copy, modify, merge, publish,
+" distribute, sublicense, and/or sell copies of the Software, and to
+" permit persons to whom the Software is furnished to do so, subject to
+" the following conditions:
+"
+" The above copyright notice and this permission notice shall be
+" included in all copies or substantial portions of the Software.
+"
+" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+" NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+" LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+" WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+if exists('g:loaded_plug')
+  finish
+endif
+let g:loaded_plug = 1
+
+let s:cpo_save = &cpo
+set cpo&vim
+
+let s:plug_src = 'https://github.com/junegunn/vim-plug.git'
+let s:plug_tab = get(s:, 'plug_tab', -1)
+let s:plug_buf = get(s:, 'plug_buf', -1)
+let s:mac_gui = has('gui_macvim') && has('gui_running')
+let s:is_win = has('win32')
+let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)
+let s:vim8 = has('patch-8.0.0039') && exists('*job_start')
+if s:is_win && &shellslash
+  set noshellslash
+  let s:me = resolve(expand('<sfile>:p'))
+  set shellslash
+else
+  let s:me = resolve(expand('<sfile>:p'))
+endif
+let s:base_spec = { 'branch': '', 'frozen': 0 }
+let s:TYPE = {
+\   'string':  type(''),
+\   'list':    type([]),
+\   'dict':    type({}),
+\   'funcref': type(function('call'))
+\ }
+let s:loaded = get(s:, 'loaded', {})
+let s:triggers = get(s:, 'triggers', {})
+
+function! s:is_powershell(shell)
+  return a:shell =~# 'powershell\(\.exe\)\?$' || a:shell =~# 'pwsh\(\.exe\)\?$'
+endfunction
+
+function! s:isabsolute(dir) abort
+  return a:dir =~# '^/' || (has('win32') && a:dir =~? '^\%(\\\|[A-Z]:\)')
+endfunction
+
+function! s:git_dir(dir) abort
+  let gitdir = s:trim(a:dir) . '/.git'
+  if isdirectory(gitdir)
+    return gitdir
+  endif
+  if !filereadable(gitdir)
+    return ''
+  endif
+  let gitdir = matchstr(get(readfile(gitdir), 0, ''), '^gitdir: \zs.*')
+  if len(gitdir) && !s:isabsolute(gitdir)
+    let gitdir = a:dir . '/' . gitdir
+  endif
+  return isdirectory(gitdir) ? gitdir : ''
+endfunction
+
+function! s:git_origin_url(dir) abort
+  let gitdir = s:git_dir(a:dir)
+  let config = gitdir . '/config'
+  if empty(gitdir) || !filereadable(config)
+    return ''
+  endif
+  return matchstr(join(readfile(config)), '\[remote "origin"\].\{-}url\s*=\s*\zs\S*\ze')
+endfunction
+
+function! s:git_revision(dir) abort
+  let gitdir = s:git_dir(a:dir)
+  let head = gitdir . '/HEAD'
+  if empty(gitdir) || !filereadable(head)
+    return ''
+  endif
+
+  let line = get(readfile(head), 0, '')
+  let ref = matchstr(line, '^ref: \zs.*')
+  if empty(ref)
+    return line
+  endif
+
+  if filereadable(gitdir . '/' . ref)
+    return get(readfile(gitdir . '/' . ref), 0, '')
+  endif
+
+  if filereadable(gitdir . '/packed-refs')
+    for line in readfile(gitdir . '/packed-refs')
+      if line =~# ' ' . ref
+        return matchstr(line, '^[0-9a-f]*')
+      endif
+    endfor
+  endif
+
+  return ''
+endfunction
+
+function! s:git_local_branch(dir) abort
+  let gitdir = s:git_dir(a:dir)
+  let head = gitdir . '/HEAD'
+  if empty(gitdir) || !filereadable(head)
+    return ''
+  endif
+  let branch = matchstr(get(readfile(head), 0, ''), '^ref: refs/heads/\zs.*')
+  return len(branch) ? branch : 'HEAD'
+endfunction
+
+function! s:git_origin_branch(spec)
+  if len(a:spec.branch)
+    return a:spec.branch
+  endif
+
+  " The file may not be present if this is a local repository
+  let gitdir = s:git_dir(a:spec.dir)
+  let origin_head = gitdir.'/refs/remotes/origin/HEAD'
+  if len(gitdir) && filereadable(origin_head)
+    return matchstr(get(readfile(origin_head), 0, ''),
+                  \ '^ref: refs/remotes/origin/\zs.*')
+  endif
+
+  " The command may not return the name of a branch in detached HEAD state
+  let result = s:lines(s:system('git symbolic-ref --short HEAD', a:spec.dir))
+  return v:shell_error ? '' : result[-1]
+endfunction
+
+if s:is_win
+  function! s:plug_call(fn, ...)
+    let shellslash = &shellslash
+    try
+      set noshellslash
+      return call(a:fn, a:000)
+    finally
+      let &shellslash = shellslash
+    endtry
+  endfunction
+else
+  function! s:plug_call(fn, ...)
+    return call(a:fn, a:000)
+  endfunction
+endif
+
+function! s:plug_getcwd()
+  return s:plug_call('getcwd')
+endfunction
+
+function! s:plug_fnamemodify(fname, mods)
+  return s:plug_call('fnamemodify', a:fname, a:mods)
+endfunction
+
+function! s:plug_expand(fmt)
+  return s:plug_call('expand', a:fmt, 1)
+endfunction
+
+function! s:plug_tempname()
+  return s:plug_call('tempname')
+endfunction
+
+function! plug#begin(...)
+  if a:0 > 0
+    let s:plug_home_org = a:1
+    let home = s:path(s:plug_fnamemodify(s:plug_expand(a:1), ':p'))
+  elseif exists('g:plug_home')
+    let home = s:path(g:plug_home)
+  elseif !empty(&rtp)
+    let home = s:path(split(&rtp, ',')[0]) . '/plugged'
+  else
+    return s:err('Unable to determine plug home. Try calling plug#begin() with a path argument.')
+  endif
+  if s:plug_fnamemodify(home, ':t') ==# 'plugin' && s:plug_fnamemodify(home, ':h') ==# s:first_rtp
+    return s:err('Invalid plug home. '.home.' is a standard Vim runtime path and is not allowed.')
+  endif
+
+  let g:plug_home = home
+  let g:plugs = {}
+  let g:plugs_order = []
+  let s:triggers = {}
+
+  call s:define_commands()
+  return 1
+endfunction
+
+function! s:define_commands()
+  command! -nargs=+ -bar Plug call plug#(<args>)
+  if !executable('git')
+    return s:err('`git` executable not found. Most commands will not be available. To suppress this message, prepend `silent!` to `call plug#begin(...)`.')
+  endif
+  if has('win32')
+  \ && &shellslash
+  \ && (&shell =~# 'cmd\(\.exe\)\?$' || s:is_powershell(&shell))
+    return s:err('vim-plug does not support shell, ' . &shell . ', when shellslash is set.')
+  endif
+  if !has('nvim')
+    \ && (has('win32') || has('win32unix'))
+    \ && !has('multi_byte')
+    return s:err('Vim needs +multi_byte feature on Windows to run shell commands. Enable +iconv for best results.')
+  endif
+  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, [<f-args>])
+  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [<f-args>])
+  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)
+  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif
+  command! -nargs=0 -bar PlugStatus  call s:status()
+  command! -nargs=0 -bar PlugDiff    call s:diff()
+  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)
+endfunction
+
+function! s:to_a(v)
+  return type(a:v) == s:TYPE.list ? a:v : [a:v]
+endfunction
+
+function! s:to_s(v)
+  return type(a:v) == s:TYPE.string ? a:v : join(a:v, "\n") . "\n"
+endfunction
+
+function! s:glob(from, pattern)
+  return s:lines(globpath(a:from, a:pattern))
+endfunction
+
+function! s:source(from, ...)
+  let found = 0
+  for pattern in a:000
+    for vim in s:glob(a:from, pattern)
+      execute 'source' s:esc(vim)
+      let found = 1
+    endfor
+  endfor
+  return found
+endfunction
+
+function! s:assoc(dict, key, val)
+  let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)
+endfunction
+
+function! s:ask(message, ...)
+  call inputsave()
+  echohl WarningMsg
+  let answer = input(a:message.(a:0 ? ' (y/N/a) ' : ' (y/N) '))
+  echohl None
+  call inputrestore()
+  echo "\r"
+  return (a:0 && answer =~? '^a') ? 2 : (answer =~? '^y') ? 1 : 0
+endfunction
+
+function! s:ask_no_interrupt(...)
+  try
+    return call('s:ask', a:000)
+  catch
+    return 0
+  endtry
+endfunction
+
+function! s:lazy(plug, opt)
+  return has_key(a:plug, a:opt) &&
+        \ (empty(s:to_a(a:plug[a:opt]))         ||
+        \  !isdirectory(a:plug.dir)             ||
+        \  len(s:glob(s:rtp(a:plug), 'plugin')) ||
+        \  len(s:glob(s:rtp(a:plug), 'after/plugin')))
+endfunction
+
+function! plug#end()
+  if !exists('g:plugs')
+    return s:err('plug#end() called without calling plug#begin() first')
+  endif
+
+  if exists('#PlugLOD')
+    augroup PlugLOD
+      autocmd!
+    augroup END
+    augroup! PlugLOD
+  endif
+  let lod = { 'ft': {}, 'map': {}, 'cmd': {} }
+
+  if exists('g:did_load_filetypes')
+    filetype off
+  endif
+  for name in g:plugs_order
+    if !has_key(g:plugs, name)
+      continue
+    endif
+    let plug = g:plugs[name]
+    if get(s:loaded, name, 0) || !s:lazy(plug, 'on') && !s:lazy(plug, 'for')
+      let s:loaded[name] = 1
+      continue
+    endif
+
+    if has_key(plug, 'on')
+      let s:triggers[name] = { 'map': [], 'cmd': [] }
+      for cmd in s:to_a(plug.on)
+        if cmd =~? '^<Plug>.\+'
+          if empty(mapcheck(cmd)) && empty(mapcheck(cmd, 'i'))
+            call s:assoc(lod.map, cmd, name)
+          endif
+          call add(s:triggers[name].map, cmd)
+        elseif cmd =~# '^[A-Z]'
+          let cmd = substitute(cmd, '!*$', '', '')
+          if exists(':'.cmd) != 2
+            call s:assoc(lod.cmd, cmd, name)
+          endif
+          call add(s:triggers[name].cmd, cmd)
+        else
+          call s:err('Invalid `on` option: '.cmd.
+          \ '. Should start with an uppercase letter or `<Plug>`.')
+        endif
+      endfor
+    endif
+
+    if has_key(plug, 'for')
+      let types = s:to_a(plug.for)
+      if !empty(types)
+        augroup filetypedetect
+        call s:source(s:rtp(plug), 'ftdetect/**/*.vim', 'after/ftdetect/**/*.vim')
+        augroup END
+      endif
+      for type in types
+        call s:assoc(lod.ft, type, name)
+      endfor
+    endif
+  endfor
+
+  for [cmd, names] in items(lod.cmd)
+    execute printf(
+    \ 'command! -nargs=* -range -bang -complete=file %s call s:lod_cmd(%s, "<bang>", <line1>, <line2>, <q-args>, %s)',
+    \ cmd, string(cmd), string(names))
+  endfor
+
+  for [map, names] in items(lod.map)
+    for [mode, map_prefix, key_prefix] in
+          \ [['i', '<C-O>', ''], ['n', '', ''], ['v', '', 'gv'], ['o', '', '']]
+      execute printf(
+      \ '%snoremap <silent> %s %s:<C-U>call <SID>lod_map(%s, %s, %s, "%s")<CR>',
+      \ mode, map, map_prefix, string(map), string(names), mode != 'i', key_prefix)
+    endfor
+  endfor
+
+  for [ft, names] in items(lod.ft)
+    augroup PlugLOD
+      execute printf('autocmd FileType %s call <SID>lod_ft(%s, %s)',
+            \ ft, string(ft), string(names))
+    augroup END
+  endfor
+
+  call s:reorg_rtp()
+  filetype plugin indent on
+  if has('vim_starting')
+    if has('syntax') && !exists('g:syntax_on')
+      syntax enable
+    end
+  else
+    call s:reload_plugins()
+  endif
+endfunction
+
+function! s:loaded_names()
+  return filter(copy(g:plugs_order), 'get(s:loaded, v:val, 0)')
+endfunction
+
+function! s:load_plugin(spec)
+  call s:source(s:rtp(a:spec), 'plugin/**/*.vim', 'after/plugin/**/*.vim')
+endfunction
+
+function! s:reload_plugins()
+  for name in s:loaded_names()
+    call s:load_plugin(g:plugs[name])
+  endfor
+endfunction
+
+function! s:trim(str)
+  return substitute(a:str, '[\/]\+$', '', '')
+endfunction
+
+function! s:version_requirement(val, min)
+  for idx in range(0, len(a:min) - 1)
+    let v = get(a:val, idx, 0)
+    if     v < a:min[idx] | return 0
+    elseif v > a:min[idx] | return 1
+    endif
+  endfor
+  return 1
+endfunction
+
+function! s:git_version_requirement(...)
+  if !exists('s:git_version')
+    let s:git_version = map(split(split(s:system(['git', '--version']))[2], '\.'), 'str2nr(v:val)')
+  endif
+  return s:version_requirement(s:git_version, a:000)
+endfunction
+
+function! s:progress_opt(base)
+  return a:base && !s:is_win &&
+        \ s:git_version_requirement(1, 7, 1) ? '--progress' : ''
+endfunction
+
+function! s:rtp(spec)
+  return s:path(a:spec.dir . get(a:spec, 'rtp', ''))
+endfunction
+
+if s:is_win
+  function! s:path(path)
+    return s:trim(substitute(a:path, '/', '\', 'g'))
+  endfunction
+
+  function! s:dirpath(path)
+    return s:path(a:path) . '\'
+  endfunction
+
+  function! s:is_local_plug(repo)
+    return a:repo =~? '^[a-z]:\|^[%~]'
+  endfunction
+
+  " Copied from fzf
+  function! s:wrap_cmds(cmds)
+    let cmds = [
+      \ '@echo off',
+      \ 'setlocal enabledelayedexpansion']
+    \ + (type(a:cmds) == type([]) ? a:cmds : [a:cmds])
+    \ + ['endlocal']
+    if has('iconv')
+      if !exists('s:codepage')
+        let s:codepage = libcallnr('kernel32.dll', 'GetACP', 0)
+      endif
+      return map(cmds, printf('iconv(v:val."\r", "%s", "cp%d")', &encoding, s:codepage))
+    endif
+    return map(cmds, 'v:val."\r"')
+  endfunction
+
+  function! s:batchfile(cmd)
+    let batchfile = s:plug_tempname().'.bat'
+    call writefile(s:wrap_cmds(a:cmd), batchfile)
+    let cmd = plug#shellescape(batchfile, {'shell': &shell, 'script': 0})
+    if s:is_powershell(&shell)
+      let cmd = '& ' . cmd
+    endif
+    return [batchfile, cmd]
+  endfunction
+else
+  function! s:path(path)
+    return s:trim(a:path)
+  endfunction
+
+  function! s:dirpath(path)
+    return substitute(a:path, '[/\\]*$', '/', '')
+  endfunction
+
+  function! s:is_local_plug(repo)
+    return a:repo[0] =~ '[/$~]'
+  endfunction
+endif
+
+function! s:err(msg)
+  echohl ErrorMsg
+  echom '[vim-plug] '.a:msg
+  echohl None
+endfunction
+
+function! s:warn(cmd, msg)
+  echohl WarningMsg
+  execute a:cmd 'a:msg'
+  echohl None
+endfunction
+
+function! s:esc(path)
+  return escape(a:path, ' ')
+endfunction
+
+function! s:escrtp(path)
+  return escape(a:path, ' ,')
+endfunction
+
+function! s:remove_rtp()
+  for name in s:loaded_names()
+    let rtp = s:rtp(g:plugs[name])
+    execute 'set rtp-='.s:escrtp(rtp)
+    let after = globpath(rtp, 'after')
+    if isdirectory(after)
+      execute 'set rtp-='.s:escrtp(after)
+    endif
+  endfor
+endfunction
+
+function! s:reorg_rtp()
+  if !empty(s:first_rtp)
+    execute 'set rtp-='.s:first_rtp
+    execute 'set rtp-='.s:last_rtp
+  endif
+
+  " &rtp is modified from outside
+  if exists('s:prtp') && s:prtp !=# &rtp
+    call s:remove_rtp()
+    unlet! s:middle
+  endif
+
+  let s:middle = get(s:, 'middle', &rtp)
+  let rtps     = map(s:loaded_names(), 's:rtp(g:plugs[v:val])')
+  let afters   = filter(map(copy(rtps), 'globpath(v:val, "after")'), '!empty(v:val)')
+  let rtp      = join(map(rtps, 'escape(v:val, ",")'), ',')
+                 \ . ','.s:middle.','
+                 \ . join(map(afters, 'escape(v:val, ",")'), ',')
+  let &rtp     = substitute(substitute(rtp, ',,*', ',', 'g'), '^,\|,$', '', 'g')
+  let s:prtp   = &rtp
+
+  if !empty(s:first_rtp)
+    execute 'set rtp^='.s:first_rtp
+    execute 'set rtp+='.s:last_rtp
+  endif
+endfunction
+
+function! s:doautocmd(...)
+  if exists('#'.join(a:000, '#'))
+    execute 'doautocmd' ((v:version > 703 || has('patch442')) ? '<nomodeline>' : '') join(a:000)
+  endif
+endfunction
+
+function! s:dobufread(names)
+  for name in a:names
+    let path = s:rtp(g:plugs[name])
+    for dir in ['ftdetect', 'ftplugin', 'after/ftdetect', 'after/ftplugin']
+      if len(finddir(dir, path))
+        if exists('#BufRead')
+          doautocmd BufRead
+        endif
+        return
+      endif
+    endfor
+  endfor
+endfunction
+
+function! plug#load(...)
+  if a:0 == 0
+    return s:err('Argument missing: plugin name(s) required')
+  endif
+  if !exists('g:plugs')
+    return s:err('plug#begin was not called')
+  endif
+  let names = a:0 == 1 && type(a:1) == s:TYPE.list ? a:1 : a:000
+  let unknowns = filter(copy(names), '!has_key(g:plugs, v:val)')
+  if !empty(unknowns)
+    let s = len(unknowns) > 1 ? 's' : ''
+    return s:err(printf('Unknown plugin%s: %s', s, join(unknowns, ', ')))
+  end
+  let unloaded = filter(copy(names), '!get(s:loaded, v:val, 0)')
+  if !empty(unloaded)
+    for name in unloaded
+      call s:lod([name], ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])
+    endfor
+    call s:dobufread(unloaded)
+    return 1
+  end
+  return 0
+endfunction
+
+function! s:remove_triggers(name)
+  if !has_key(s:triggers, a:name)
+    return
+  endif
+  for cmd in s:triggers[a:name].cmd
+    execute 'silent! delc' cmd
+  endfor
+  for map in s:triggers[a:name].map
+    execute 'silent! unmap' map
+    execute 'silent! iunmap' map
+  endfor
+  call remove(s:triggers, a:name)
+endfunction
+
+function! s:lod(names, types, ...)
+  for name in a:names
+    call s:remove_triggers(name)
+    let s:loaded[name] = 1
+  endfor
+  call s:reorg_rtp()
+
+  for name in a:names
+    let rtp = s:rtp(g:plugs[name])
+    for dir in a:types
+      call s:source(rtp, dir.'/**/*.vim')
+    endfor
+    if a:0
+      if !s:source(rtp, a:1) && !empty(s:glob(rtp, a:2))
+        execute 'runtime' a:1
+      endif
+      call s:source(rtp, a:2)
+    endif
+    call s:doautocmd('User', name)
+  endfor
+endfunction
+
+function! s:lod_ft(pat, names)
+  let syn = 'syntax/'.a:pat.'.vim'
+  call s:lod(a:names, ['plugin', 'after/plugin'], syn, 'after/'.syn)
+  execute 'autocmd! PlugLOD FileType' a:pat
+  call s:doautocmd('filetypeplugin', 'FileType')
+  call s:doautocmd('filetypeindent', 'FileType')
+endfunction
+
+function! s:lod_cmd(cmd, bang, l1, l2, args, names)
+  call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])
+  call s:dobufread(a:names)
+  execute printf('%s%s%s %s', (a:l1 == a:l2 ? '' : (a:l1.','.a:l2)), a:cmd, a:bang, a:args)
+endfunction
+
+function! s:lod_map(map, names, with_prefix, prefix)
+  call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])
+  call s:dobufread(a:names)
+  let extra = ''
+  while 1
+    let c = getchar(0)
+    if c == 0
+      break
+    endif
+    let extra .= nr2char(c)
+  endwhile
+
+  if a:with_prefix
+    let prefix = v:count ? v:count : ''
+    let prefix .= '"'.v:register.a:prefix
+    if mode(1) == 'no'
+      if v:operator == 'c'
+        let prefix = "\<esc>" . prefix
+      endif
+      let prefix .= v:operator
+    endif
+    call feedkeys(prefix, 'n')
+  endif
+  call feedkeys(substitute(a:map, '^<Plug>', "\<Plug>", '') . extra)
+endfunction
+
+function! plug#(repo, ...)
+  if a:0 > 1
+    return s:err('Invalid number of arguments (1..2)')
+  endif
+
+  try
+    let repo = s:trim(a:repo)
+    let opts = a:0 == 1 ? s:parse_options(a:1) : s:base_spec
+    let name = get(opts, 'as', s:plug_fnamemodify(repo, ':t:s?\.git$??'))
+    let spec = extend(s:infer_properties(name, repo), opts)
+    if !has_key(g:plugs, name)
+      call add(g:plugs_order, name)
+    endif
+    let g:plugs[name] = spec
+    let s:loaded[name] = get(s:loaded, name, 0)
+  catch
+    return s:err(repo . ' ' . v:exception)
+  endtry
+endfunction
+
+function! s:parse_options(arg)
+  let opts = copy(s:base_spec)
+  let type = type(a:arg)
+  let opt_errfmt = 'Invalid argument for "%s" option of :Plug (expected: %s)'
+  if type == s:TYPE.string
+    if empty(a:arg)
+      throw printf(opt_errfmt, 'tag', 'string')
+    endif
+    let opts.tag = a:arg
+  elseif type == s:TYPE.dict
+    for opt in ['branch', 'tag', 'commit', 'rtp', 'dir', 'as']
+      if has_key(a:arg, opt)
+      \ && (type(a:arg[opt]) != s:TYPE.string || empty(a:arg[opt]))
+        throw printf(opt_errfmt, opt, 'string')
+      endif
+    endfor
+    for opt in ['on', 'for']
+      if has_key(a:arg, opt)
+      \ && type(a:arg[opt]) != s:TYPE.list
+      \ && (type(a:arg[opt]) != s:TYPE.string || empty(a:arg[opt]))
+        throw printf(opt_errfmt, opt, 'string or list')
+      endif
+    endfor
+    if has_key(a:arg, 'do')
+      \ && type(a:arg.do) != s:TYPE.funcref
+      \ && (type(a:arg.do) != s:TYPE.string || empty(a:arg.do))
+        throw printf(opt_errfmt, 'do', 'string or funcref')
+    endif
+    call extend(opts, a:arg)
+    if has_key(opts, 'dir')
+      let opts.dir = s:dirpath(s:plug_expand(opts.dir))
+    endif
+  else
+    throw 'Invalid argument type (expected: string or dictionary)'
+  endif
+  return opts
+endfunction
+
+function! s:infer_properties(name, repo)
+  let repo = a:repo
+  if s:is_local_plug(repo)
+    return { 'dir': s:dirpath(s:plug_expand(repo)) }
+  else
+    if repo =~ ':'
+      let uri = repo
+    else
+      if repo !~ '/'
+        throw printf('Invalid argument: %s (implicit `vim-scripts'' expansion is deprecated)', repo)
+      endif
+      let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')
+      let uri = printf(fmt, repo)
+    endif
+    return { 'dir': s:dirpath(g:plug_home.'/'.a:name), 'uri': uri }
+  endif
+endfunction
+
+function! s:install(force, names)
+  call s:update_impl(0, a:force, a:names)
+endfunction
+
+function! s:update(force, names)
+  call s:update_impl(1, a:force, a:names)
+endfunction
+
+function! plug#helptags()
+  if !exists('g:plugs')
+    return s:err('plug#begin was not called')
+  endif
+  for spec in values(g:plugs)
+    let docd = join([s:rtp(spec), 'doc'], '/')
+    if isdirectory(docd)
+      silent! execute 'helptags' s:esc(docd)
+    endif
+  endfor
+  return 1
+endfunction
+
+function! s:syntax()
+  syntax clear
+  syntax region plug1 start=/\%1l/ end=/\%2l/ contains=plugNumber
+  syntax region plug2 start=/\%2l/ end=/\%3l/ contains=plugBracket,plugX
+  syn match plugNumber /[0-9]\+[0-9.]*/ contained
+  syn match plugBracket /[[\]]/ contained
+  syn match plugX /x/ contained
+  syn match plugDash /^-\{1}\ /
+  syn match plugPlus /^+/
+  syn match plugStar /^*/
+  syn match plugMessage /\(^- \)\@<=.*/
+  syn match plugName /\(^- \)\@<=[^ ]*:/
+  syn match plugSha /\%(: \)\@<=[0-9a-f]\{4,}$/
+  syn match plugTag /(tag: [^)]\+)/
+  syn match plugInstall /\(^+ \)\@<=[^:]*/
+  syn match plugUpdate /\(^* \)\@<=[^:]*/
+  syn match plugCommit /^  \X*[0-9a-f]\{7,9} .*/ contains=plugRelDate,plugEdge,plugTag
+  syn match plugEdge /^  \X\+$/
+  syn match plugEdge /^  \X*/ contained nextgroup=plugSha
+  syn match plugSha /[0-9a-f]\{7,9}/ contained
+  syn match plugRelDate /([^)]*)$/ contained
+  syn match plugNotLoaded /(not loaded)$/
+  syn match plugError /^x.*/
+  syn region plugDeleted start=/^\~ .*/ end=/^\ze\S/
+  syn match plugH2 /^.*:\n-\+$/
+  syn match plugH2 /^-\{2,}/
+  syn keyword Function PlugInstall PlugStatus PlugUpdate PlugClean
+  hi def link plug1       Title
+  hi def link plug2       Repeat
+  hi def link plugH2      Type
+  hi def link plugX       Exception
+  hi def link plugBracket Structure
+  hi def link plugNumber  Number
+
+  hi def link plugDash    Special
+  hi def link plugPlus    Constant
+  hi def link plugStar    Boolean
+
+  hi def link plugMessage Function
+  hi def link plugName    Label
+  hi def link plugInstall Function
+  hi def link plugUpdate  Type
+
+  hi def link plugError   Error
+  hi def link plugDeleted Ignore
+  hi def link plugRelDate Comment
+  hi def link plugEdge    PreProc
+  hi def link plugSha     Identifier
+  hi def link plugTag     Constant
+
+  hi def link plugNotLoaded Comment
+endfunction
+
+function! s:lpad(str, len)
+  return a:str . repeat(' ', a:len - len(a:str))
+endfunction
+
+function! s:lines(msg)
+  return split(a:msg, "[\r\n]")
+endfunction
+
+function! s:lastline(msg)
+  return get(s:lines(a:msg), -1, '')
+endfunction
+
+function! s:new_window()
+  execute get(g:, 'plug_window', 'vertical topleft new')
+endfunction
+
+function! s:plug_window_exists()
+  let buflist = tabpagebuflist(s:plug_tab)
+  return !empty(buflist) && index(buflist, s:plug_buf) >= 0
+endfunction
+
+function! s:switch_in()
+  if !s:plug_window_exists()
+    return 0
+  endif
+
+  if winbufnr(0) != s:plug_buf
+    let s:pos = [tabpagenr(), winnr(), winsaveview()]
+    execute 'normal!' s:plug_tab.'gt'
+    let winnr = bufwinnr(s:plug_buf)
+    execute winnr.'wincmd w'
+    call add(s:pos, winsaveview())
+  else
+    let s:pos = [winsaveview()]
+  endif
+
+  setlocal modifiable
+  return 1
+endfunction
+
+function! s:switch_out(...)
+  call winrestview(s:pos[-1])
+  setlocal nomodifiable
+  if a:0 > 0
+    execute a:1
+  endif
+
+  if len(s:pos) > 1
+    execute 'normal!' s:pos[0].'gt'
+    execute s:pos[1] 'wincmd w'
+    call winrestview(s:pos[2])
+  endif
+endfunction
+
+function! s:finish_bindings()
+  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>
+  nnoremap <silent> <buffer> D  :PlugDiff<cr>
+  nnoremap <silent> <buffer> S  :PlugStatus<cr>
+  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>
+  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>
+  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>
+  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>
+endfunction
+
+function! s:prepare(...)
+  if empty(s:plug_getcwd())
+    throw 'Invalid current working directory. Cannot proceed.'
+  endif
+
+  for evar in ['$GIT_DIR', '$GIT_WORK_TREE']
+    if exists(evar)
+      throw evar.' detected. Cannot proceed.'
+    endif
+  endfor
+
+  call s:job_abort()
+  if s:switch_in()
+    if b:plug_preview == 1
+      pc
+    endif
+    enew
+  else
+    call s:new_window()
+  endif
+
+  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>
+  if a:0 == 0
+    call s:finish_bindings()
+  endif
+  let b:plug_preview = -1
+  let s:plug_tab = tabpagenr()
+  let s:plug_buf = winbufnr(0)
+  call s:assign_name()
+
+  for k in ['<cr>', 'L', 'o', 'X', 'd', 'dd']
+    execute 'silent! unmap <buffer>' k
+  endfor
+  setlocal buftype=nofile bufhidden=wipe nobuflisted nolist noswapfile nowrap cursorline modifiable nospell
+  if exists('+colorcolumn')
+    setlocal colorcolumn=
+  endif
+  setf vim-plug
+  if exists('g:syntax_on')
+    call s:syntax()
+  endif
+endfunction
+
+function! s:close_pane()
+  if b:plug_preview == 1
+    pc
+    let b:plug_preview = -1
+  else
+    bd
+  endif
+endfunction
+
+function! s:assign_name()
+  " Assign buffer name
+  let prefix = '[Plugins]'
+  let name   = prefix
+  let idx    = 2
+  while bufexists(name)
+    let name = printf('%s (%s)', prefix, idx)
+    let idx = idx + 1
+  endwhile
+  silent! execute 'f' fnameescape(name)
+endfunction
+
+function! s:chsh(swap)
+  let prev = [&shell, &shellcmdflag, &shellredir]
+  if !s:is_win
+    set shell=sh
+  endif
+  if a:swap
+    if s:is_powershell(&shell)
+      let &shellredir = '2>&1 | Out-File -Encoding UTF8 %s'
+    elseif &shell =~# 'sh' || &shell =~# 'cmd\(\.exe\)\?$'
+      set shellredir=>%s\ 2>&1
+    endif
+  endif
+  return prev
+endfunction
+
+function! s:bang(cmd, ...)
+  let batchfile = ''
+  try
+    let [sh, shellcmdflag, shrd] = s:chsh(a:0)
+    " FIXME: Escaping is incomplete. We could use shellescape with eval,
+    "        but it won't work on Windows.
+    let cmd = a:0 ? s:with_cd(a:cmd, a:1) : a:cmd
+    if s:is_win
+      let [batchfile, cmd] = s:batchfile(cmd)
+    endif
+    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')
+    execute "normal! :execute g:_plug_bang\<cr>\<cr>"
+  finally
+    unlet g:_plug_bang
+    let [&shell, &shellcmdflag, &shellredir] = [sh, shellcmdflag, shrd]
+    if s:is_win && filereadable(batchfile)
+      call delete(batchfile)
+    endif
+  endtry
+  return v:shell_error ? 'Exit status: ' . v:shell_error : ''
+endfunction
+
+function! s:regress_bar()
+  let bar = substitute(getline(2)[1:-2], '.*\zs=', 'x', '')
+  call s:progress_bar(2, bar, len(bar))
+endfunction
+
+function! s:is_updated(dir)
+  return !empty(s:system_chomp(['git', 'log', '--pretty=format:%h', 'HEAD...HEAD@{1}'], a:dir))
+endfunction
+
+function! s:do(pull, force, todo)
+  for [name, spec] in items(a:todo)
+    if !isdirectory(spec.dir)
+      continue
+    endif
+    let installed = has_key(s:update.new, name)
+    let updated = installed ? 0 :
+      \ (a:pull && index(s:update.errors, name) < 0 && s:is_updated(spec.dir))
+    if a:force || installed || updated
+      execute 'cd' s:esc(spec.dir)
+      call append(3, '- Post-update hook for '. name .' ... ')
+      let error = ''
+      let type = type(spec.do)
+      if type == s:TYPE.string
+        if spec.do[0] == ':'
+          if !get(s:loaded, name, 0)
+            let s:loaded[name] = 1
+            call s:reorg_rtp()
+          endif
+          call s:load_plugin(spec)
+          try
+            execute spec.do[1:]
+          catch
+            let error = v:exception
+          endtry
+          if !s:plug_window_exists()
+            cd -
+            throw 'Warning: vim-plug was terminated by the post-update hook of '.name
+          endif
+        else
+          let error = s:bang(spec.do)
+        endif
+      elseif type == s:TYPE.funcref
+        try
+          call s:load_plugin(spec)
+          let status = installed ? 'installed' : (updated ? 'updated' : 'unchanged')
+          call spec.do({ 'name': name, 'status': status, 'force': a:force })
+        catch
+          let error = v:exception
+        endtry
+      else
+        let error = 'Invalid hook type'
+      endif
+      call s:switch_in()
+      call setline(4, empty(error) ? (getline(4) . 'OK')
+                                 \ : ('x' . getline(4)[1:] . error))
+      if !empty(error)
+        call add(s:update.errors, name)
+        call s:regress_bar()
+      endif
+      cd -
+    endif
+  endfor
+endfunction
+
+function! s:hash_match(a, b)
+  return stridx(a:a, a:b) == 0 || stridx(a:b, a:a) == 0
+endfunction
+
+function! s:checkout(spec)
+  let sha = a:spec.commit
+  let output = s:git_revision(a:spec.dir)
+  if !empty(output) && !s:hash_match(sha, s:lines(output)[0])
+    let credential_helper = s:git_version_requirement(2) ? '-c credential.helper= ' : ''
+    let output = s:system(
+          \ 'git '.credential_helper.'fetch --depth 999999 && git checkout '.plug#shellescape(sha).' --', a:spec.dir)
+  endif
+  return output
+endfunction
+
+function! s:finish(pull)
+  let new_frozen = len(filter(keys(s:update.new), 'g:plugs[v:val].frozen'))
+  if new_frozen
+    let s = new_frozen > 1 ? 's' : ''
+    call append(3, printf('- Installed %d frozen plugin%s', new_frozen, s))
+  endif
+  call append(3, '- Finishing ... ') | 4
+  redraw
+  call plug#helptags()
+  call plug#end()
+  call setline(4, getline(4) . 'Done!')
+  redraw
+  let msgs = []
+  if !empty(s:update.errors)
+    call add(msgs, "Press 'R' to retry.")
+  endif
+  if a:pull && len(s:update.new) < len(filter(getline(5, '$'),
+                \ "v:val =~ '^- ' && v:val !~# 'Already up.to.date'"))
+    call add(msgs, "Press 'D' to see the updated changes.")
+  endif
+  echo join(msgs, ' ')
+  call s:finish_bindings()
+endfunction
+
+function! s:retry()
+  if empty(s:update.errors)
+    return
+  endif
+  echo
+  call s:update_impl(s:update.pull, s:update.force,
+        \ extend(copy(s:update.errors), [s:update.threads]))
+endfunction
+
+function! s:is_managed(name)
+  return has_key(g:plugs[a:name], 'uri')
+endfunction
+
+function! s:names(...)
+  return sort(filter(keys(g:plugs), 'stridx(v:val, a:1) == 0 && s:is_managed(v:val)'))
+endfunction
+
+function! s:check_ruby()
+  silent! ruby require 'thread'; VIM::command("let g:plug_ruby = '#{RUBY_VERSION}'")
+  if !exists('g:plug_ruby')
+    redraw!
+    return s:warn('echom', 'Warning: Ruby interface is broken')
+  endif
+  let ruby_version = split(g:plug_ruby, '\.')
+  unlet g:plug_ruby
+  return s:version_requirement(ruby_version, [1, 8, 7])
+endfunction
+
+function! s:update_impl(pull, force, args) abort
+  let sync = index(a:args, '--sync') >= 0 || has('vim_starting')
+  let args = filter(copy(a:args), 'v:val != "--sync"')
+  let threads = (len(args) > 0 && args[-1] =~ '^[1-9][0-9]*$') ?
+                  \ remove(args, -1) : get(g:, 'plug_threads', 16)
+
+  let managed = filter(copy(g:plugs), 's:is_managed(v:key)')
+  let todo = empty(args) ? filter(managed, '!v:val.frozen || !isdirectory(v:val.dir)') :
+                         \ filter(managed, 'index(args, v:key) >= 0')
+
+  if empty(todo)
+    return s:warn('echo', 'No plugin to '. (a:pull ? 'update' : 'install'))
+  endif
+
+  if !s:is_win && s:git_version_requirement(2, 3)
+    let s:git_terminal_prompt = exists('$GIT_TERMINAL_PROMPT') ? $GIT_TERMINAL_PROMPT : ''
+    let $GIT_TERMINAL_PROMPT = 0
+    for plug in values(todo)
+      let plug.uri = substitute(plug.uri,
+            \ '^https://git::@github\.com', 'https://github.com', '')
+    endfor
+  endif
+
+  if !isdirectory(g:plug_home)
+    try
+      call mkdir(g:plug_home, 'p')
+    catch
+      return s:err(printf('Invalid plug directory: %s. '.
+              \ 'Try to call plug#begin with a valid directory', g:plug_home))
+    endtry
+  endif
+
+  if has('nvim') && !exists('*jobwait') && threads > 1
+    call s:warn('echom', '[vim-plug] Update Neovim for parallel installer')
+  endif
+
+  let use_job = s:nvim || s:vim8
+  let python = (has('python') || has('python3')) && !use_job
+  let ruby = has('ruby') && !use_job && (v:version >= 703 || v:version == 702 && has('patch374')) && !(s:is_win && has('gui_running')) && threads > 1 && s:check_ruby()
+
+  let s:update = {
+    \ 'start':   reltime(),
+    \ 'all':     todo,
+    \ 'todo':    copy(todo),
+    \ 'errors':  [],
+    \ 'pull':    a:pull,
+    \ 'force':   a:force,
+    \ 'new':     {},
+    \ 'threads': (python || ruby || use_job) ? min([len(todo), threads]) : 1,
+    \ 'bar':     '',
+    \ 'fin':     0
+  \ }
+
+  call s:prepare(1)
+  call append(0, ['', ''])
+  normal! 2G
+  silent! redraw
+
+  " Set remote name, overriding a possible user git config's clone.defaultRemoteName
+  let s:clone_opt = ['--origin', 'origin']
+  if get(g:, 'plug_shallow', 1)
+    call extend(s:clone_opt, ['--depth', '1'])
+    if s:git_version_requirement(1, 7, 10)
+      call add(s:clone_opt, '--no-single-branch')
+    endif
+  endif
+
+  if has('win32unix') || has('wsl')
+    call extend(s:clone_opt, ['-c', 'core.eol=lf', '-c', 'core.autocrlf=input'])
+  endif
+
+  let s:submodule_opt = s:git_version_requirement(2, 8) ? ' --jobs='.threads : ''
+
+  " Python version requirement (>= 2.7)
+  if python && !has('python3') && !ruby && !use_job && s:update.threads > 1
+    redir => pyv
+    silent python import platform; print platform.python_version()
+    redir END
+    let python = s:version_requirement(
+          \ map(split(split(pyv)[0], '\.'), 'str2nr(v:val)'), [2, 6])
+  endif
+
+  if (python || ruby) && s:update.threads > 1
+    try
+      let imd = &imd
+      if s:mac_gui
+        set noimd
+      endif
+      if ruby
+        call s:update_ruby()
+      else
+        call s:update_python()
+      endif
+    catch
+      let lines = getline(4, '$')
+      let printed = {}
+      silent! 4,$d _
+      for line in lines
+        let name = s:extract_name(line, '.', '')
+        if empty(name) || !has_key(printed, name)
+          call append('$', line)
+          if !empty(name)
+            let printed[name] = 1
+            if line[0] == 'x' && index(s:update.errors, name) < 0
+              call add(s:update.errors, name)
+            end
+          endif
+        endif
+      endfor
+    finally
+      let &imd = imd
+      call s:update_finish()
+    endtry
+  else
+    call s:update_vim()
+    while use_job && sync
+      sleep 100m
+      if s:update.fin
+        break
+      endif
+    endwhile
+  endif
+endfunction
+
+function! s:log4(name, msg)
+  call setline(4, printf('- %s (%s)', a:msg, a:name))
+  redraw
+endfunction
+
+function! s:update_finish()
+  if exists('s:git_terminal_prompt')
+    let $GIT_TERMINAL_PROMPT = s:git_terminal_prompt
+  endif
+  if s:switch_in()
+    call append(3, '- Updating ...') | 4
+    for [name, spec] in items(filter(copy(s:update.all), 'index(s:update.errors, v:key) < 0 && (s:update.force || s:update.pull || has_key(s:update.new, v:key))'))
+      let [pos, _] = s:logpos(name)
+      if !pos
+        continue
+      endif
+      if has_key(spec, 'commit')
+        call s:log4(name, 'Checking out '.spec.commit)
+        let out = s:checkout(spec)
+      elseif has_key(spec, 'tag')
+        let tag = spec.tag
+        if tag =~ '\*'
+          let tags = s:lines(s:system('git tag --list '.plug#shellescape(tag).' --sort -version:refname 2>&1', spec.dir))
+          if !v:shell_error && !empty(tags)
+            let tag = tags[0]
+            call s:log4(name, printf('Latest tag for %s -> %s', spec.tag, tag))
+            call append(3, '')
+          endif
+        endif
+        call s:log4(name, 'Checking out '.tag)
+        let out = s:system('git checkout -q '.plug#shellescape(tag).' -- 2>&1', spec.dir)
+      else
+        let branch = s:git_origin_branch(spec)
+        call s:log4(name, 'Merging origin/'.s:esc(branch))
+        let out = s:system('git checkout -q '.plug#shellescape(branch).' -- 2>&1'
+              \. (has_key(s:update.new, name) ? '' : ('&& git merge --ff-only '.plug#shellescape('origin/'.branch).' 2>&1')), spec.dir)
+      endif
+      if !v:shell_error && filereadable(spec.dir.'/.gitmodules') &&
+            \ (s:update.force || has_key(s:update.new, name) || s:is_updated(spec.dir))
+        call s:log4(name, 'Updating submodules. This may take a while.')
+        let out .= s:bang('git submodule update --init --recursive'.s:submodule_opt.' 2>&1', spec.dir)
+      endif
+      let msg = s:format_message(v:shell_error ? 'x': '-', name, out)
+      if v:shell_error
+        call add(s:update.errors, name)
+        call s:regress_bar()
+        silent execute pos 'd _'
+        call append(4, msg) | 4
+      elseif !empty(out)
+        call setline(pos, msg[0])
+      endif
+      redraw
+    endfor
+    silent 4 d _
+    try
+      call s:do(s:update.pull, s:update.force, filter(copy(s:update.all), 'index(s:update.errors, v:key) < 0 && has_key(v:val, "do")'))
+    catch
+      call s:warn('echom', v:exception)
+      call s:warn('echo', '')
+      return
+    endtry
+    call s:finish(s:update.pull)
+    call setline(1, 'Updated. Elapsed time: ' . split(reltimestr(reltime(s:update.start)))[0] . ' sec.')
+    call s:switch_out('normal! gg')
+  endif
+endfunction
+
+function! s:job_abort()
+  if (!s:nvim && !s:vim8) || !exists('s:jobs')
+    return
+  endif
+
+  for [name, j] in items(s:jobs)
+    if s:nvim
+      silent! call jobstop(j.jobid)
+    elseif s:vim8
+      silent! call job_stop(j.jobid)
+    endif
+    if j.new
+      call s:rm_rf(g:plugs[name].dir)
+    endif
+  endfor
+  let s:jobs = {}
+endfunction
+
+function! s:last_non_empty_line(lines)
+  let len = len(a:lines)
+  for idx in range(len)
+    let line = a:lines[len-idx-1]
+    if !empty(line)
+      return line
+    endif
+  endfor
+  return ''
+endfunction
+
+function! s:job_out_cb(self, data) abort
+  let self = a:self
+  let data = remove(self.lines, -1) . a:data
+  let lines = map(split(data, "\n", 1), 'split(v:val, "\r", 1)[-1]')
+  call extend(self.lines, lines)
+  " To reduce the number of buffer updates
+  let self.tick = get(self, 'tick', -1) + 1
+  if !self.running || self.tick % len(s:jobs) == 0
+    let bullet = self.running ? (self.new ? '+' : '*') : (self.error ? 'x' : '-')
+    let result = self.error ? join(self.lines, "\n") : s:last_non_empty_line(self.lines)
+    call s:log(bullet, self.name, result)
+  endif
+endfunction
+
+function! s:job_exit_cb(self, data) abort
+  let a:self.running = 0
+  let a:self.error = a:data != 0
+  call s:reap(a:self.name)
+  call s:tick()
+endfunction
+
+function! s:job_cb(fn, job, ch, data)
+  if !s:plug_window_exists() " plug window closed
+    return s:job_abort()
+  endif
+  call call(a:fn, [a:job, a:data])
+endfunction
+
+function! s:nvim_cb(job_id, data, event) dict abort
+  return (a:event == 'stdout' || a:event == 'stderr') ?
+    \ s:job_cb('s:job_out_cb',  self, 0, join(a:data, "\n")) :
+    \ s:job_cb('s:job_exit_cb', self, 0, a:data)
+endfunction
+
+function! s:spawn(name, cmd, opts)
+  let job = { 'name': a:name, 'running': 1, 'error': 0, 'lines': [''],
+            \ 'new': get(a:opts, 'new', 0) }
+  let s:jobs[a:name] = job
+
+  if s:nvim
+    if has_key(a:opts, 'dir')
+      let job.cwd = a:opts.dir
+    endif
+    let argv = a:cmd
+    call extend(job, {
+    \ 'on_stdout': function('s:nvim_cb'),
+    \ 'on_stderr': function('s:nvim_cb'),
+    \ 'on_exit':   function('s:nvim_cb'),
+    \ })
+    let jid = s:plug_call('jobstart', argv, job)
+    if jid > 0
+      let job.jobid = jid
+    else
+      let job.running = 0
+      let job.error   = 1
+      let job.lines   = [jid < 0 ? argv[0].' is not executable' :
+            \ 'Invalid arguments (or job table is full)']
+    endif
+  elseif s:vim8
+    let cmd = join(map(copy(a:cmd), 'plug#shellescape(v:val, {"script": 0})'))
+    if has_key(a:opts, 'dir')
+      let cmd = s:with_cd(cmd, a:opts.dir, 0)
+    endif
+    let argv = s:is_win ? ['cmd', '/s', '/c', '"'.cmd.'"'] : ['sh', '-c', cmd]
+    let jid = job_start(s:is_win ? join(argv, ' ') : argv, {
+    \ 'out_cb':   function('s:job_cb', ['s:job_out_cb',  job]),
+    \ 'err_cb':   function('s:job_cb', ['s:job_out_cb',  job]),
+    \ 'exit_cb':  function('s:job_cb', ['s:job_exit_cb', job]),
+    \ 'err_mode': 'raw',
+    \ 'out_mode': 'raw'
+    \})
+    if job_status(jid) == 'run'
+      let job.jobid = jid
+    else
+      let job.running = 0
+      let job.error   = 1
+      let job.lines   = ['Failed to start job']
+    endif
+  else
+    let job.lines = s:lines(call('s:system', has_key(a:opts, 'dir') ? [a:cmd, a:opts.dir] : [a:cmd]))
+    let job.error = v:shell_error != 0
+    let job.running = 0
+  endif
+endfunction
+
+function! s:reap(name)
+  let job = s:jobs[a:name]
+  if job.error
+    call add(s:update.errors, a:name)
+  elseif get(job, 'new', 0)
+    let s:update.new[a:name] = 1
+  endif
+  let s:update.bar .= job.error ? 'x' : '='
+
+  let bullet = job.error ? 'x' : '-'
+  let result = job.error ? join(job.lines, "\n") : s:last_non_empty_line(job.lines)
+  call s:log(bullet, a:name, empty(result) ? 'OK' : result)
+  call s:bar()
+
+  call remove(s:jobs, a:name)
+endfunction
+
+function! s:bar()
+  if s:switch_in()
+    let total = len(s:update.all)
+    call setline(1, (s:update.pull ? 'Updating' : 'Installing').
+          \ ' plugins ('.len(s:update.bar).'/'.total.')')
+    call s:progress_bar(2, s:update.bar, total)
+    call s:switch_out()
+  endif
+endfunction
+
+function! s:logpos(name)
+  let max = line('$')
+  for i in range(4, max > 4 ? max : 4)
+    if getline(i) =~# '^[-+x*] '.a:name.':'
+      for j in range(i + 1, max > 5 ? max : 5)
+        if getline(j) !~ '^ '
+          return [i, j - 1]
+        endif
+      endfor
+      return [i, i]
+    endif
+  endfor
+  return [0, 0]
+endfunction
+
+function! s:log(bullet, name, lines)
+  if s:switch_in()
+    let [b, e] = s:logpos(a:name)
+    if b > 0
+      silent execute printf('%d,%d d _', b, e)
+      if b > winheight('.')
+        let b = 4
+      endif
+    else
+      let b = 4
+    endif
+    " FIXME For some reason, nomodifiable is set after :d in vim8
+    setlocal modifiable
+    call append(b - 1, s:format_message(a:bullet, a:name, a:lines))
+    call s:switch_out()
+  endif
+endfunction
+
+function! s:update_vim()
+  let s:jobs = {}
+
+  call s:bar()
+  call s:tick()
+endfunction
+
+function! s:tick()
+  let pull = s:update.pull
+  let prog = s:progress_opt(s:nvim || s:vim8)
+while 1 " Without TCO, Vim stack is bound to explode
+  if empty(s:update.todo)
+    if empty(s:jobs) && !s:update.fin
+      call s:update_finish()
+      let s:update.fin = 1
+    endif
+    return
+  endif
+
+  let name = keys(s:update.todo)[0]
+  let spec = remove(s:update.todo, name)
+  let new  = empty(globpath(spec.dir, '.git', 1))
+
+  call s:log(new ? '+' : '*', name, pull ? 'Updating ...' : 'Installing ...')
+  redraw
+
+  let has_tag = has_key(spec, 'tag')
+  if !new
+    let [error, _] = s:git_validate(spec, 0)
+    if empty(error)
+      if pull
+        let cmd = s:git_version_requirement(2) ? ['git', '-c', 'credential.helper=', 'fetch'] : ['git', 'fetch']
+        if has_tag && !empty(globpath(spec.dir, '.git/shallow'))
+          call extend(cmd, ['--depth', '99999999'])
+        endif
+        if !empty(prog)
+          call add(cmd, prog)
+        endif
+        call s:spawn(name, cmd, { 'dir': spec.dir })
+      else
+        let s:jobs[name] = { 'running': 0, 'lines': ['Already installed'], 'error': 0 }
+      endif
+    else
+      let s:jobs[name] = { 'running': 0, 'lines': s:lines(error), 'error': 1 }
+    endif
+  else
+    let cmd = ['git', 'clone']
+    if !has_tag
+      call extend(cmd, s:clone_opt)
+    endif
+    if !empty(prog)
+      call add(cmd, prog)
+    endif
+    call s:spawn(name, extend(cmd, [spec.uri, s:trim(spec.dir)]), { 'new': 1 })
+  endif
+
+  if !s:jobs[name].running
+    call s:reap(name)
+  endif
+  if len(s:jobs) >= s:update.threads
+    break
+  endif
+endwhile
+endfunction
+
+function! s:update_python()
+let py_exe = has('python') ? 'python' : 'python3'
+execute py_exe "<< EOF"
+import datetime
+import functools
+import os
+try:
+  import queue
+except ImportError:
+  import Queue as queue
+import random
+import re
+import shutil
+import signal
+import subprocess
+import tempfile
+import threading as thr
+import time
+import traceback
+import vim
+
+G_NVIM = vim.eval("has('nvim')") == '1'
+G_PULL = vim.eval('s:update.pull') == '1'
+G_RETRIES = int(vim.eval('get(g:, "plug_retries", 2)')) + 1
+G_TIMEOUT = int(vim.eval('get(g:, "plug_timeout", 60)'))
+G_CLONE_OPT = ' '.join(vim.eval('s:clone_opt'))
+G_PROGRESS = vim.eval('s:progress_opt(1)')
+G_LOG_PROB = 1.0 / int(vim.eval('s:update.threads'))
+G_STOP = thr.Event()
+G_IS_WIN = vim.eval('s:is_win') == '1'
+
+class PlugError(Exception):
+  def __init__(self, msg):
+    self.msg = msg
+class CmdTimedOut(PlugError):
+  pass
+class CmdFailed(PlugError):
+  pass
+class InvalidURI(PlugError):
+  pass
+class Action(object):
+  INSTALL, UPDATE, ERROR, DONE = ['+', '*', 'x', '-']
+
+class Buffer(object):
+  def __init__(self, lock, num_plugs, is_pull):
+    self.bar = ''
+    self.event = 'Updating' if is_pull else 'Installing'
+    self.lock = lock
+    self.maxy = int(vim.eval('winheight(".")'))
+    self.num_plugs = num_plugs
+
+  def __where(self, name):
+    """ Find first line with name in current buffer. Return line num. """
+    found, lnum = False, 0
+    matcher = re.compile('^[-+x*] {0}:'.format(name))
+    for line in vim.current.buffer:
+      if matcher.search(line) is not None:
+        found = True
+        break
+      lnum += 1
+
+    if not found:
+      lnum = -1
+    return lnum
+
+  def header(self):
+    curbuf = vim.current.buffer
+    curbuf[0] = self.event + ' plugins ({0}/{1})'.format(len(self.bar), self.num_plugs)
+
+    num_spaces = self.num_plugs - len(self.bar)
+    curbuf[1] = '[{0}{1}]'.format(self.bar, num_spaces * ' ')
+
+    with self.lock:
+      vim.command('normal! 2G')
+      vim.command('redraw')
+
+  def write(self, action, name, lines):
+    first, rest = lines[0], lines[1:]
+    msg = ['{0} {1}{2}{3}'.format(action, name, ': ' if first else '', first)]
+    msg.extend(['    ' + line for line in rest])
+
+    try:
+      if action == Action.ERROR:
+        self.bar += 'x'
+        vim.command("call add(s:update.errors, '{0}')".format(name))
+      elif action == Action.DONE:
+        self.bar += '='
+
+      curbuf = vim.current.buffer
+      lnum = self.__where(name)
+      if lnum != -1: # Found matching line num
+        del curbuf[lnum]
+        if lnum > self.maxy and action in set([Action.INSTALL, Action.UPDATE]):
+          lnum = 3
+      else:
+        lnum = 3
+      curbuf.append(msg, lnum)
+
+      self.header()
+    except vim.error:
+      pass
+
+class Command(object):
+  CD = 'cd /d' if G_IS_WIN else 'cd'
+
+  def __init__(self, cmd, cmd_dir=None, timeout=60, cb=None, clean=None):
+    self.cmd = cmd
+    if cmd_dir:
+      self.cmd = '{0} {1} && {2}'.format(Command.CD, cmd_dir, self.cmd)
+    self.timeout = timeout
+    self.callback = cb if cb else (lambda msg: None)
+    self.clean = clean if clean else (lambda: None)
+    self.proc = None
+
+  @property
+  def alive(self):
+    """ Returns true only if command still running. """
+    return self.proc and self.proc.poll() is None
+
+  def execute(self, ntries=3):
+    """ Execute the command with ntries if CmdTimedOut.
+        Returns the output of the command if no Exception.
+    """
+    attempt, finished, limit = 0, False, self.timeout
+
+    while not finished:
+      try:
+        attempt += 1
+        result = self.try_command()
+        finished = True
+        return result
+      except CmdTimedOut:
+        if attempt != ntries:
+          self.notify_retry()
+          self.timeout += limit
+        else:
+          raise
+
+  def notify_retry(self):
+    """ Retry required for command, notify user. """
+    for count in range(3, 0, -1):
+      if G_STOP.is_set():
+        raise KeyboardInterrupt
+      msg = 'Timeout. Will retry in {0} second{1} ...'.format(
+            count, 's' if count != 1 else '')
+      self.callback([msg])
+      time.sleep(1)
+    self.callback(['Retrying ...'])
+
+  def try_command(self):
+    """ Execute a cmd & poll for callback. Returns list of output.
+        Raises CmdFailed   -> return code for Popen isn't 0
+        Raises CmdTimedOut -> command exceeded timeout without new output
+    """
+    first_line = True
+
+    try:
+      tfile = tempfile.NamedTemporaryFile(mode='w+b')
+      preexec_fn = not G_IS_WIN and os.setsid or None
+      self.proc = subprocess.Popen(self.cmd, stdout=tfile,
+                                   stderr=subprocess.STDOUT,
+                                   stdin=subprocess.PIPE, shell=True,
+                                   preexec_fn=preexec_fn)
+      thrd = thr.Thread(target=(lambda proc: proc.wait()), args=(self.proc,))
+      thrd.start()
+
+      thread_not_started = True
+      while thread_not_started:
+        try:
+          thrd.join(0.1)
+          thread_not_started = False
+        except RuntimeError:
+          pass
+
+      while self.alive:
+        if G_STOP.is_set():
+          raise KeyboardInterrupt
+
+        if first_line or random.random() < G_LOG_PROB:
+          first_line = False
+          line = '' if G_IS_WIN else nonblock_read(tfile.name)
+          if line:
+            self.callback([line])
+
+        time_diff = time.time() - os.path.getmtime(tfile.name)
+        if time_diff > self.timeout:
+          raise CmdTimedOut(['Timeout!'])
+
+        thrd.join(0.5)
+
+      tfile.seek(0)
+      result = [line.decode('utf-8', 'replace').rstrip() for line in tfile]
+
+      if self.proc.returncode != 0:
+        raise CmdFailed([''] + result)
+
+      return result
+    except:
+      self.terminate()
+      raise
+
+  def terminate(self):
+    """ Terminate process and cleanup. """
+    if self.alive:
+      if G_IS_WIN:
+        os.kill(self.proc.pid, signal.SIGINT)
+      else:
+        os.killpg(self.proc.pid, signal.SIGTERM)
+    self.clean()
+
+class Plugin(object):
+  def __init__(self, name, args, buf_q, lock):
+    self.name = name
+    self.args = args
+    self.buf_q = buf_q
+    self.lock = lock
+    self.tag = args.get('tag', 0)
+
+  def manage(self):
+    try:
+      if os.path.exists(self.args['dir']):
+        self.update()
+      else:
+        self.install()
+        with self.lock:
+          thread_vim_command("let s:update.new['{0}'] = 1".format(self.name))
+    except PlugError as exc:
+      self.write(Action.ERROR, self.name, exc.msg)
+    except KeyboardInterrupt:
+      G_STOP.set()
+      self.write(Action.ERROR, self.name, ['Interrupted!'])
+    except:
+      # Any exception except those above print stack trace
+      msg = 'Trace:\n{0}'.format(traceback.format_exc().rstrip())
+      self.write(Action.ERROR, self.name, msg.split('\n'))
+      raise
+
+  def install(self):
+    target = self.args['dir']
+    if target[-1] == '\\':
+      target = target[0:-1]
+
+    def clean(target):
+      def _clean():
+        try:
+          shutil.rmtree(target)
+        except OSError:
+          pass
+      return _clean
+
+    self.write(Action.INSTALL, self.name, ['Installing ...'])
+    callback = functools.partial(self.write, Action.INSTALL, self.name)
+    cmd = 'git clone {0} {1} {2} {3} 2>&1'.format(
+          '' if self.tag else G_CLONE_OPT, G_PROGRESS, self.args['uri'],
+          esc(target))
+    com = Command(cmd, None, G_TIMEOUT, callback, clean(target))
+    result = com.execute(G_RETRIES)
+    self.write(Action.DONE, self.name, result[-1:])
+
+  def repo_uri(self):
+    cmd = 'git rev-parse --abbrev-ref HEAD 2>&1 && git config -f .git/config remote.origin.url'
+    command = Command(cmd, self.args['dir'], G_TIMEOUT,)
+    result = command.execute(G_RETRIES)
+    return result[-1]
+
+  def update(self):
+    actual_uri = self.repo_uri()
+    expect_uri = self.args['uri']
+    regex = re.compile(r'^(?:\w+://)?(?:[^@/]*@)?([^:/]*(?::[0-9]*)?)[:/](.*?)(?:\.git)?/?$')
+    ma = regex.match(actual_uri)
+    mb = regex.match(expect_uri)
+    if ma is None or mb is None or ma.groups() != mb.groups():
+      msg = ['',
+             'Invalid URI: {0}'.format(actual_uri),
+             'Expected     {0}'.format(expect_uri),
+             'PlugClean required.']
+      raise InvalidURI(msg)
+
+    if G_PULL:
+      self.write(Action.UPDATE, self.name, ['Updating ...'])
+      callback = functools.partial(self.write, Action.UPDATE, self.name)
+      fetch_opt = '--depth 99999999' if self.tag and os.path.isfile(os.path.join(self.args['dir'], '.git/shallow')) else ''
+      cmd = 'git fetch {0} {1} 2>&1'.format(fetch_opt, G_PROGRESS)
+      com = Command(cmd, self.args['dir'], G_TIMEOUT, callback)
+      result = com.execute(G_RETRIES)
+      self.write(Action.DONE, self.name, result[-1:])
+    else:
+      self.write(Action.DONE, self.name, ['Already installed'])
+
+  def write(self, action, name, msg):
+    self.buf_q.put((action, name, msg))
+
+class PlugThread(thr.Thread):
+  def __init__(self, tname, args):
+    super(PlugThread, self).__init__()
+    self.tname = tname
+    self.args = args
+
+  def run(self):
+    thr.current_thread().name = self.tname
+    buf_q, work_q, lock = self.args
+
+    try:
+      while not G_STOP.is_set():
+        name, args = work_q.get_nowait()
+        plug = Plugin(name, args, buf_q, lock)
+        plug.manage()
+        work_q.task_done()
+    except queue.Empty:
+      pass
+
+class RefreshThread(thr.Thread):
+  def __init__(self, lock):
+    super(RefreshThread, self).__init__()
+    self.lock = lock
+    self.running = True
+
+  def run(self):
+    while self.running:
+      with self.lock:
+        thread_vim_command('noautocmd normal! a')
+      time.sleep(0.33)
+
+  def stop(self):
+    self.running = False
+
+if G_NVIM:
+  def thread_vim_command(cmd):
+    vim.session.threadsafe_call(lambda: vim.command(cmd))
+else:
+  def thread_vim_command(cmd):
+    vim.command(cmd)
+
+def esc(name):
+  return '"' + name.replace('"', '\"') + '"'
+
+def nonblock_read(fname):
+  """ Read a file with nonblock flag. Return the last line. """
+  fread = os.open(fname, os.O_RDONLY | os.O_NONBLOCK)
+  buf = os.read(fread, 100000).decode('utf-8', 'replace')
+  os.close(fread)
+
+  line = buf.rstrip('\r\n')
+  left = max(line.rfind('\r'), line.rfind('\n'))
+  if left != -1:
+    left += 1
+    line = line[left:]
+
+  return line
+
+def main():
+  thr.current_thread().name = 'main'
+  nthreads = int(vim.eval('s:update.threads'))
+  plugs = vim.eval('s:update.todo')
+  mac_gui = vim.eval('s:mac_gui') == '1'
+
+  lock = thr.Lock()
+  buf = Buffer(lock, len(plugs), G_PULL)
+  buf_q, work_q = queue.Queue(), queue.Queue()
+  for work in plugs.items():
+    work_q.put(work)
+
+  start_cnt = thr.active_count()
+  for num in range(nthreads):
+    tname = 'PlugT-{0:02}'.format(num)
+    thread = PlugThread(tname, (buf_q, work_q, lock))
+    thread.start()
+  if mac_gui:
+    rthread = RefreshThread(lock)
+    rthread.start()
+
+  while not buf_q.empty() or thr.active_count() != start_cnt:
+    try:
+      action, name, msg = buf_q.get(True, 0.25)
+      buf.write(action, name, ['OK'] if not msg else msg)
+      buf_q.task_done()
+    except queue.Empty:
+      pass
+    except KeyboardInterrupt:
+      G_STOP.set()
+
+  if mac_gui:
+    rthread.stop()
+    rthread.join()
+
+main()
+EOF
+endfunction
+
+function! s:update_ruby()
+  ruby << EOF
+  module PlugStream
+    SEP = ["\r", "\n", nil]
+    def get_line
+      buffer = ''
+      loop do
+        char = readchar rescue return
+        if SEP.include? char.chr
+          buffer << $/
+          break
+        else
+          buffer << char
+        end
+      end
+      buffer
+    end
+  end unless defined?(PlugStream)
+
+  def esc arg
+    %["#{arg.gsub('"', '\"')}"]
+  end
+
+  def killall pid
+    pids = [pid]
+    if /mswin|mingw|bccwin/ =~ RUBY_PLATFORM
+      pids.each { |pid| Process.kill 'INT', pid.to_i rescue nil }
+    else
+      unless `which pgrep 2> /dev/null`.empty?
+        children = pids
+        until children.empty?
+          children = children.map { |pid|
+            `pgrep -P #{pid}`.lines.map { |l| l.chomp }
+          }.flatten
+          pids += children
+        end
+      end
+      pids.each { |pid| Process.kill 'TERM', pid.to_i rescue nil }
+    end
+  end
+
+  def compare_git_uri a, b
+    regex = %r{^(?:\w+://)?(?:[^@/]*@)?([^:/]*(?::[0-9]*)?)[:/](.*?)(?:\.git)?/?$}
+    regex.match(a).to_a.drop(1) == regex.match(b).to_a.drop(1)
+  end
+
+  require 'thread'
+  require 'fileutils'
+  require 'timeout'
+  running = true
+  iswin = VIM::evaluate('s:is_win').to_i == 1
+  pull  = VIM::evaluate('s:update.pull').to_i == 1
+  base  = VIM::evaluate('g:plug_home')
+  all   = VIM::evaluate('s:update.todo')
+  limit = VIM::evaluate('get(g:, "plug_timeout", 60)')
+  tries = VIM::evaluate('get(g:, "plug_retries", 2)') + 1
+  nthr  = VIM::evaluate('s:update.threads').to_i
+  maxy  = VIM::evaluate('winheight(".")').to_i
+  vim7  = VIM::evaluate('v:version').to_i <= 703 && RUBY_PLATFORM =~ /darwin/
+  cd    = iswin ? 'cd /d' : 'cd'
+  tot   = VIM::evaluate('len(s:update.todo)') || 0
+  bar   = ''
+  skip  = 'Already installed'
+  mtx   = Mutex.new
+  take1 = proc { mtx.synchronize { running && all.shift } }
+  logh  = proc {
+    cnt = bar.length
+    $curbuf[1] = "#{pull ? 'Updating' : 'Installing'} plugins (#{cnt}/#{tot})"
+    $curbuf[2] = '[' + bar.ljust(tot) + ']'
+    VIM::command('normal! 2G')
+    VIM::command('redraw')
+  }
+  where = proc { |name| (1..($curbuf.length)).find { |l| $curbuf[l] =~ /^[-+x*] #{name}:/ } }
+  log   = proc { |name, result, type|
+    mtx.synchronize do
+      ing  = ![true, false].include?(type)
+      bar += type ? '=' : 'x' unless ing
+      b = case type
+          when :install  then '+' when :update then '*'
+          when true, nil then '-' else
+            VIM::command("call add(s:update.errors, '#{name}')")
+            'x'
+          end
+      result =
+        if type || type.nil?
+          ["#{b} #{name}: #{result.lines.to_a.last || 'OK'}"]
+        elsif result =~ /^Interrupted|^Timeout/
+          ["#{b} #{name}: #{result}"]
+        else
+          ["#{b} #{name}"] + result.lines.map { |l| "    " << l }
+        end
+      if lnum = where.call(name)
+        $curbuf.delete lnum
+        lnum = 4 if ing && lnum > maxy
+      end
+      result.each_with_index do |line, offset|
+        $curbuf.append((lnum || 4) - 1 + offset, line.gsub(/\e\[./, '').chomp)
+      end
+      logh.call
+    end
+  }
+  bt = proc { |cmd, name, type, cleanup|
+    tried = timeout = 0
+    begin
+      tried += 1
+      timeout += limit
+      fd = nil
+      data = ''
+      if iswin
+        Timeout::timeout(timeout) do
+          tmp = VIM::evaluate('tempname()')
+          system("(#{cmd}) > #{tmp}")
+          data = File.read(tmp).chomp
+          File.unlink tmp rescue nil
+        end
+      else
+        fd = IO.popen(cmd).extend(PlugStream)
+        first_line = true
+        log_prob = 1.0 / nthr
+        while line = Timeout::timeout(timeout) { fd.get_line }
+          data << line
+          log.call name, line.chomp, type if name && (first_line || rand < log_prob)
+          first_line = false
+        end
+        fd.close
+      end
+      [$? == 0, data.chomp]
+    rescue Timeout::Error, Interrupt => e
+      if fd && !fd.closed?
+        killall fd.pid
+        fd.close
+      end
+      cleanup.call if cleanup
+      if e.is_a?(Timeout::Error) && tried < tries
+        3.downto(1) do |countdown|
+          s = countdown > 1 ? 's' : ''
+          log.call name, "Timeout. Will retry in #{countdown} second#{s} ...", type
+          sleep 1
+        end
+        log.call name, 'Retrying ...', type
+        retry
+      end
+      [false, e.is_a?(Interrupt) ? "Interrupted!" : "Timeout!"]
+    end
+  }
+  main = Thread.current
+  threads = []
+  watcher = Thread.new {
+    if vim7
+      while VIM::evaluate('getchar(1)')
+        sleep 0.1
+      end
+    else
+      require 'io/console' # >= Ruby 1.9
+      nil until IO.console.getch == 3.chr
+    end
+    mtx.synchronize do
+      running = false
+      threads.each { |t| t.raise Interrupt } unless vim7
+    end
+    threads.each { |t| t.join rescue nil }
+    main.kill
+  }
+  refresh = Thread.new {
+    while true
+      mtx.synchronize do
+        break unless running
+        VIM::command('noautocmd normal! a')
+      end
+      sleep 0.2
+    end
+  } if VIM::evaluate('s:mac_gui') == 1
+
+  clone_opt = VIM::evaluate('s:clone_opt').join(' ')
+  progress = VIM::evaluate('s:progress_opt(1)')
+  nthr.times do
+    mtx.synchronize do
+      threads << Thread.new {
+        while pair = take1.call
+          name = pair.first
+          dir, uri, tag = pair.last.values_at *%w[dir uri tag]
+          exists = File.directory? dir
+          ok, result =
+            if exists
+              chdir = "#{cd} #{iswin ? dir : esc(dir)}"
+              ret, data = bt.call "#{chdir} && git rev-parse --abbrev-ref HEAD 2>&1 && git config -f .git/config remote.origin.url", nil, nil, nil
+              current_uri = data.lines.to_a.last
+              if !ret
+                if data =~ /^Interrupted|^Timeout/
+                  [false, data]
+                else
+                  [false, [data.chomp, "PlugClean required."].join($/)]
+                end
+              elsif !compare_git_uri(current_uri, uri)
+                [false, ["Invalid URI: #{current_uri}",
+                         "Expected:    #{uri}",
+                         "PlugClean required."].join($/)]
+              else
+                if pull
+                  log.call name, 'Updating ...', :update
+                  fetch_opt = (tag && File.exist?(File.join(dir, '.git/shallow'))) ? '--depth 99999999' : ''
+                  bt.call "#{chdir} && git fetch #{fetch_opt} #{progress} 2>&1", name, :update, nil
+                else
+                  [true, skip]
+                end
+              end
+            else
+              d = esc dir.sub(%r{[\\/]+$}, '')
+              log.call name, 'Installing ...', :install
+              bt.call "git clone #{clone_opt unless tag} #{progress} #{uri} #{d} 2>&1", name, :install, proc {
+                FileUtils.rm_rf dir
+              }
+            end
+          mtx.synchronize { VIM::command("let s:update.new['#{name}'] = 1") } if !exists && ok
+          log.call name, result, ok
+        end
+      } if running
+    end
+  end
+  threads.each { |t| t.join rescue nil }
+  logh.call
+  refresh.kill if refresh
+  watcher.kill
+EOF
+endfunction
+
+function! s:shellesc_cmd(arg, script)
+  let escaped = substitute('"'.a:arg.'"', '[&|<>()@^!"]', '^&', 'g')
+  return substitute(escaped, '%', (a:script ? '%' : '^') . '&', 'g')
+endfunction
+
+function! s:shellesc_ps1(arg)
+  return "'".substitute(escape(a:arg, '\"'), "'", "''", 'g')."'"
+endfunction
+
+function! s:shellesc_sh(arg)
+  return "'".substitute(a:arg, "'", "'\\\\''", 'g')."'"
+endfunction
+
+" Escape the shell argument based on the shell.
+" Vim and Neovim's shellescape() are insufficient.
+" 1. shellslash determines whether to use single/double quotes.
+"    Double-quote escaping is fragile for cmd.exe.
+" 2. It does not work for powershell.
+" 3. It does not work for *sh shells if the command is executed
+"    via cmd.exe (ie. cmd.exe /c sh -c command command_args)
+" 4. It does not support batchfile syntax.
+"
+" Accepts an optional dictionary with the following keys:
+" - shell: same as Vim/Neovim 'shell' option.
+"          If unset, fallback to 'cmd.exe' on Windows or 'sh'.
+" - script: If truthy and shell is cmd.exe, escape for batchfile syntax.
+function! plug#shellescape(arg, ...)
+  if a:arg =~# '^[A-Za-z0-9_/:.-]\+$'
+    return a:arg
+  endif
+  let opts = a:0 > 0 && type(a:1) == s:TYPE.dict ? a:1 : {}
+  let shell = get(opts, 'shell', s:is_win ? 'cmd.exe' : 'sh')
+  let script = get(opts, 'script', 1)
+  if shell =~# 'cmd\(\.exe\)\?$'
+    return s:shellesc_cmd(a:arg, script)
+  elseif s:is_powershell(shell)
+    return s:shellesc_ps1(a:arg)
+  endif
+  return s:shellesc_sh(a:arg)
+endfunction
+
+function! s:glob_dir(path)
+  return map(filter(s:glob(a:path, '**'), 'isdirectory(v:val)'), 's:dirpath(v:val)')
+endfunction
+
+function! s:progress_bar(line, bar, total)
+  call setline(a:line, '[' . s:lpad(a:bar, a:total) . ']')
+endfunction
+
+function! s:compare_git_uri(a, b)
+  " See `git help clone'
+  " https:// [user@] github.com[:port] / junegunn/vim-plug [.git]
+  "          [git@]  github.com[:port] : junegunn/vim-plug [.git]
+  " file://                            / junegunn/vim-plug        [/]
+  "                                    / junegunn/vim-plug        [/]
+  let pat = '^\%(\w\+://\)\='.'\%([^@/]*@\)\='.'\([^:/]*\%(:[0-9]*\)\=\)'.'[:/]'.'\(.\{-}\)'.'\%(\.git\)\=/\?$'
+  let ma = matchlist(a:a, pat)
+  let mb = matchlist(a:b, pat)
+  return ma[1:2] ==# mb[1:2]
+endfunction
+
+function! s:format_message(bullet, name, message)
+  if a:bullet != 'x'
+    return [printf('%s %s: %s', a:bullet, a:name, s:lastline(a:message))]
+  else
+    let lines = map(s:lines(a:message), '"    ".v:val')
+    return extend([printf('x %s:', a:name)], lines)
+  endif
+endfunction
+
+function! s:with_cd(cmd, dir, ...)
+  let script = a:0 > 0 ? a:1 : 1
+  return printf('cd%s %s && %s', s:is_win ? ' /d' : '', plug#shellescape(a:dir, {'script': script}), a:cmd)
+endfunction
+
+function! s:system(cmd, ...)
+  let batchfile = ''
+  try
+    let [sh, shellcmdflag, shrd] = s:chsh(1)
+    if type(a:cmd) == s:TYPE.list
+      " Neovim's system() supports list argument to bypass the shell
+      " but it cannot set the working directory for the command.
+      " Assume that the command does not rely on the shell.
+      if has('nvim') && a:0 == 0
+        return system(a:cmd)
+      endif
+      let cmd = join(map(copy(a:cmd), 'plug#shellescape(v:val, {"shell": &shell, "script": 0})'))
+      if s:is_powershell(&shell)
+        let cmd = '& ' . cmd
+      endif
+    else
+      let cmd = a:cmd
+    endif
+    if a:0 > 0
+      let cmd = s:with_cd(cmd, a:1, type(a:cmd) != s:TYPE.list)
+    endif
+    if s:is_win && type(a:cmd) != s:TYPE.list
+      let [batchfile, cmd] = s:batchfile(cmd)
+    endif
+    return system(cmd)
+  finally
+    let [&shell, &shellcmdflag, &shellredir] = [sh, shellcmdflag, shrd]
+    if s:is_win && filereadable(batchfile)
+      call delete(batchfile)
+    endif
+  endtry
+endfunction
+
+function! s:system_chomp(...)
+  let ret = call('s:system', a:000)
+  return v:shell_error ? '' : substitute(ret, '\n$', '', '')
+endfunction
+
+function! s:git_validate(spec, check_branch)
+  let err = ''
+  if isdirectory(a:spec.dir)
+    let result = [s:git_local_branch(a:spec.dir), s:git_origin_url(a:spec.dir)]
+    let remote = result[-1]
+    if empty(remote)
+      let err = join([remote, 'PlugClean required.'], "\n")
+    elseif !s:compare_git_uri(remote, a:spec.uri)
+      let err = join(['Invalid URI: '.remote,
+                    \ 'Expected:    '.a:spec.uri,
+                    \ 'PlugClean required.'], "\n")
+    elseif a:check_branch && has_key(a:spec, 'commit')
+      let sha = s:git_revision(a:spec.dir)
+      if empty(sha)
+        let err = join(add(result, 'PlugClean required.'), "\n")
+      elseif !s:hash_match(sha, a:spec.commit)
+        let err = join([printf('Invalid HEAD (expected: %s, actual: %s)',
+                              \ a:spec.commit[:6], sha[:6]),
+                      \ 'PlugUpdate required.'], "\n")
+      endif
+    elseif a:check_branch
+      let current_branch = result[0]
+      " Check tag
+      let origin_branch = s:git_origin_branch(a:spec)
+      if has_key(a:spec, 'tag')
+        let tag = s:system_chomp('git describe --exact-match --tags HEAD 2>&1', a:spec.dir)
+        if a:spec.tag !=# tag && a:spec.tag !~ '\*'
+          let err = printf('Invalid tag: %s (expected: %s). Try PlugUpdate.',
+                \ (empty(tag) ? 'N/A' : tag), a:spec.tag)
+        endif
+      " Check branch
+      elseif origin_branch !=# current_branch
+        let err = printf('Invalid branch: %s (expected: %s). Try PlugUpdate.',
+              \ current_branch, origin_branch)
+      endif
+      if empty(err)
+        let [ahead, behind] = split(s:lastline(s:system([
+        \ 'git', 'rev-list', '--count', '--left-right',
+        \ printf('HEAD...origin/%s', origin_branch)
+        \ ], a:spec.dir)), '\t')
+        if !v:shell_error && ahead
+          if behind
+            " Only mention PlugClean if diverged, otherwise it's likely to be
+            " pushable (and probably not that messed up).
+            let err = printf(
+                  \ "Diverged from origin/%s (%d commit(s) ahead and %d commit(s) behind!\n"
+                  \ .'Backup local changes and run PlugClean and PlugUpdate to reinstall it.', origin_branch, ahead, behind)
+          else
+            let err = printf("Ahead of origin/%s by %d commit(s).\n"
+                  \ .'Cannot update until local changes are pushed.',
+                  \ origin_branch, ahead)
+          endif
+        endif
+      endif
+    endif
+  else
+    let err = 'Not found'
+  endif
+  return [err, err =~# 'PlugClean']
+endfunction
+
+function! s:rm_rf(dir)
+  if isdirectory(a:dir)
+    return s:system(s:is_win
+    \ ? 'rmdir /S /Q '.plug#shellescape(a:dir)
+    \ : ['rm', '-rf', a:dir])
+  endif
+endfunction
+
+function! s:clean(force)
+  call s:prepare()
+  call append(0, 'Searching for invalid plugins in '.g:plug_home)
+  call append(1, '')
+
+  " List of valid directories
+  let dirs = []
+  let errs = {}
+  let [cnt, total] = [0, len(g:plugs)]
+  for [name, spec] in items(g:plugs)
+    if !s:is_managed(name)
+      call add(dirs, spec.dir)
+    else
+      let [err, clean] = s:git_validate(spec, 1)
+      if clean
+        let errs[spec.dir] = s:lines(err)[0]
+      else
+        call add(dirs, spec.dir)
+      endif
+    endif
+    let cnt += 1
+    call s:progress_bar(2, repeat('=', cnt), total)
+    normal! 2G
+    redraw
+  endfor
+
+  let allowed = {}
+  for dir in dirs
+    let allowed[s:dirpath(s:plug_fnamemodify(dir, ':h:h'))] = 1
+    let allowed[dir] = 1
+    for child in s:glob_dir(dir)
+      let allowed[child] = 1
+    endfor
+  endfor
+
+  let todo = []
+  let found = sort(s:glob_dir(g:plug_home))
+  while !empty(found)
+    let f = remove(found, 0)
+    if !has_key(allowed, f) && isdirectory(f)
+      call add(todo, f)
+      call append(line('$'), '- ' . f)
+      if has_key(errs, f)
+        call append(line('$'), '    ' . errs[f])
+      endif
+      let found = filter(found, 'stridx(v:val, f) != 0')
+    end
+  endwhile
+
+  4
+  redraw
+  if empty(todo)
+    call append(line('$'), 'Already clean.')
+  else
+    let s:clean_count = 0
+    call append(3, ['Directories to delete:', ''])
+    redraw!
+    if a:force || s:ask_no_interrupt('Delete all directories?')
+      call s:delete([6, line('$')], 1)
+    else
+      call setline(4, 'Cancelled.')
+      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@
+      nmap     <silent> <buffer> dd d_
+      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>
+      echo 'Delete the lines (d{motion}) to delete the corresponding directories'
+    endif
+  endif
+  4
+  setlocal nomodifiable
+endfunction
+
+function! s:delete_op(type, ...)
+  call s:delete(a:0 ? [line("'<"), line("'>")] : [line("'["), line("']")], 0)
+endfunction
+
+function! s:delete(range, force)
+  let [l1, l2] = a:range
+  let force = a:force
+  let err_count = 0
+  while l1 <= l2
+    let line = getline(l1)
+    if line =~ '^- ' && isdirectory(line[2:])
+      execute l1
+      redraw!
+      let answer = force ? 1 : s:ask('Delete '.line[2:].'?', 1)
+      let force = force || answer > 1
+      if answer
+        let err = s:rm_rf(line[2:])
+        setlocal modifiable
+        if empty(err)
+          call setline(l1, '~'.line[1:])
+          let s:clean_count += 1
+        else
+          delete _
+          call append(l1 - 1, s:format_message('x', line[1:], err))
+          let l2 += len(s:lines(err))
+          let err_count += 1
+        endif
+        let msg = printf('Removed %d directories.', s:clean_count)
+        if err_count > 0
+          let msg .= printf(' Failed to remove %d directories.', err_count)
+        endif
+        call setline(4, msg)
+        setlocal nomodifiable
+      endif
+    endif
+    let l1 += 1
+  endwhile
+endfunction
+
+function! s:upgrade()
+  echo 'Downloading the latest version of vim-plug'
+  redraw
+  let tmp = s:plug_tempname()
+  let new = tmp . '/plug.vim'
+
+  try
+    let out = s:system(['git', 'clone', '--depth', '1', s:plug_src, tmp])
+    if v:shell_error
+      return s:err('Error upgrading vim-plug: '. out)
+    endif
+
+    if readfile(s:me) ==# readfile(new)
+      echo 'vim-plug is already up-to-date'
+      return 0
+    else
+      call rename(s:me, s:me . '.old')
+      call rename(new, s:me)
+      unlet g:loaded_plug
+      echo 'vim-plug has been upgraded'
+      return 1
+    endif
+  finally
+    silent! call s:rm_rf(tmp)
+  endtry
+endfunction
+
+function! s:upgrade_specs()
+  for spec in values(g:plugs)
+    let spec.frozen = get(spec, 'frozen', 0)
+  endfor
+endfunction
+
+function! s:status()
+  call s:prepare()
+  call append(0, 'Checking plugins')
+  call append(1, '')
+
+  let ecnt = 0
+  let unloaded = 0
+  let [cnt, total] = [0, len(g:plugs)]
+  for [name, spec] in items(g:plugs)
+    let is_dir = isdirectory(spec.dir)
+    if has_key(spec, 'uri')
+      if is_dir
+        let [err, _] = s:git_validate(spec, 1)
+        let [valid, msg] = [empty(err), empty(err) ? 'OK' : err]
+      else
+        let [valid, msg] = [0, 'Not found. Try PlugInstall.']
+      endif
+    else
+      if is_dir
+        let [valid, msg] = [1, 'OK']
+      else
+        let [valid, msg] = [0, 'Not found.']
+      endif
+    endif
+    let cnt += 1
+    let ecnt += !valid
+    " `s:loaded` entry can be missing if PlugUpgraded
+    if is_dir && get(s:loaded, name, -1) == 0
+      let unloaded = 1
+      let msg .= ' (not loaded)'
+    endif
+    call s:progress_bar(2, repeat('=', cnt), total)
+    call append(3, s:format_message(valid ? '-' : 'x', name, msg))
+    normal! 2G
+    redraw
+  endfor
+  call setline(1, 'Finished. '.ecnt.' error(s).')
+  normal! gg
+  setlocal nomodifiable
+  if unloaded
+    echo "Press 'L' on each line to load plugin, or 'U' to update"
+    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>
+    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>
+  end
+endfunction
+
+function! s:extract_name(str, prefix, suffix)
+  return matchstr(a:str, '^'.a:prefix.' \zs[^:]\+\ze:.*'.a:suffix.'$')
+endfunction
+
+function! s:status_load(lnum)
+  let line = getline(a:lnum)
+  let name = s:extract_name(line, '-', '(not loaded)')
+  if !empty(name)
+    call plug#load(name)
+    setlocal modifiable
+    call setline(a:lnum, substitute(line, ' (not loaded)$', '', ''))
+    setlocal nomodifiable
+  endif
+endfunction
+
+function! s:status_update() range
+  let lines = getline(a:firstline, a:lastline)
+  let names = filter(map(lines, 's:extract_name(v:val, "[x-]", "")'), '!empty(v:val)')
+  if !empty(names)
+    echo
+    execute 'PlugUpdate' join(names)
+  endif
+endfunction
+
+function! s:is_preview_window_open()
+  silent! wincmd P
+  if &previewwindow
+    wincmd p
+    return 1
+  endif
+endfunction
+
+function! s:find_name(lnum)
+  for lnum in reverse(range(1, a:lnum))
+    let line = getline(lnum)
+    if empty(line)
+      return ''
+    endif
+    let name = s:extract_name(line, '-', '')
+    if !empty(name)
+      return name
+    endif
+  endfor
+  return ''
+endfunction
+
+function! s:preview_commit()
+  if b:plug_preview < 0
+    let b:plug_preview = !s:is_preview_window_open()
+  endif
+
+  let sha = matchstr(getline('.'), '^  \X*\zs[0-9a-f]\{7,9}')
+  if empty(sha)
+    return
+  endif
+
+  let name = s:find_name(line('.'))
+  if empty(name) || !has_key(g:plugs, name) || !isdirectory(g:plugs[name].dir)
+    return
+  endif
+
+  if exists('g:plug_pwindow') && !s:is_preview_window_open()
+    execute g:plug_pwindow
+    execute 'e' sha
+  else
+    execute 'pedit' sha
+    wincmd P
+  endif
+  setlocal previewwindow filetype=git buftype=nofile nobuflisted modifiable
+  let batchfile = ''
+  try
+    let [sh, shellcmdflag, shrd] = s:chsh(1)
+    let cmd = 'cd '.plug#shellescape(g:plugs[name].dir).' && git show --no-color --pretty=medium '.sha
+    if s:is_win
+      let [batchfile, cmd] = s:batchfile(cmd)
+    endif
+    execute 'silent %!' cmd
+  finally
+    let [&shell, &shellcmdflag, &shellredir] = [sh, shellcmdflag, shrd]
+    if s:is_win && filereadable(batchfile)
+      call delete(batchfile)
+    endif
+  endtry
+  setlocal nomodifiable
+  nnoremap <silent> <buffer> q :q<cr>
+  wincmd p
+endfunction
+
+function! s:section(flags)
+  call search('\(^[x-] \)\@<=[^:]\+:', a:flags)
+endfunction
+
+function! s:format_git_log(line)
+  let indent = '  '
+  let tokens = split(a:line, nr2char(1))
+  if len(tokens) != 5
+    return indent.substitute(a:line, '\s*$', '', '')
+  endif
+  let [graph, sha, refs, subject, date] = tokens
+  let tag = matchstr(refs, 'tag: [^,)]\+')
+  let tag = empty(tag) ? ' ' : ' ('.tag.') '
+  return printf('%s%s%s%s%s (%s)', indent, graph, sha, tag, subject, date)
+endfunction
+
+function! s:append_ul(lnum, text)
+  call append(a:lnum, ['', a:text, repeat('-', len(a:text))])
+endfunction
+
+function! s:diff()
+  call s:prepare()
+  call append(0, ['Collecting changes ...', ''])
+  let cnts = [0, 0]
+  let bar = ''
+  let total = filter(copy(g:plugs), 's:is_managed(v:key) && isdirectory(v:val.dir)')
+  call s:progress_bar(2, bar, len(total))
+  for origin in [1, 0]
+    let plugs = reverse(sort(items(filter(copy(total), (origin ? '' : '!').'(has_key(v:val, "commit") || has_key(v:val, "tag"))'))))
+    if empty(plugs)
+      continue
+    endif
+    call s:append_ul(2, origin ? 'Pending updates:' : 'Last update:')
+    for [k, v] in plugs
+      let branch = s:git_origin_branch(v)
+      if len(branch)
+        let range = origin ? '..origin/'.branch : 'HEAD@{1}..'
+        let cmd = ['git', 'log', '--graph', '--color=never']
+        if s:git_version_requirement(2, 10, 0)
+          call add(cmd, '--no-show-signature')
+        endif
+        call extend(cmd, ['--pretty=format:%x01%h%x01%d%x01%s%x01%cr', range])
+        if has_key(v, 'rtp')
+          call extend(cmd, ['--', v.rtp])
+        endif
+        let diff = s:system_chomp(cmd, v.dir)
+        if !empty(diff)
+          let ref = has_key(v, 'tag') ? (' (tag: '.v.tag.')') : has_key(v, 'commit') ? (' '.v.commit) : ''
+          call append(5, extend(['', '- '.k.':'.ref], map(s:lines(diff), 's:format_git_log(v:val)')))
+          let cnts[origin] += 1
+        endif
+      endif
+      let bar .= '='
+      call s:progress_bar(2, bar, len(total))
+      normal! 2G
+      redraw
+    endfor
+    if !cnts[origin]
+      call append(5, ['', 'N/A'])
+    endif
+  endfor
+  call setline(1, printf('%d plugin(s) updated.', cnts[0])
+        \ . (cnts[1] ? printf(' %d plugin(s) have pending updates.', cnts[1]) : ''))
+
+  if cnts[0] || cnts[1]
+    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>
+    if empty(maparg("\<cr>", 'n'))
+      nmap <buffer> <cr> <plug>(plug-preview)
+    endif
+    if empty(maparg('o', 'n'))
+      nmap <buffer> o <plug>(plug-preview)
+    endif
+  endif
+  if cnts[0]
+    nnoremap <silent> <buffer> X :call <SID>revert()<cr>
+    echo "Press 'X' on each block to revert the update"
+  endif
+  normal! gg
+  setlocal nomodifiable
+endfunction
+
+function! s:revert()
+  if search('^Pending updates', 'bnW')
+    return
+  endif
+
+  let name = s:find_name(line('.'))
+  if empty(name) || !has_key(g:plugs, name) ||
+    \ input(printf('Revert the update of %s? (y/N) ', name)) !~? '^y'
+    return
+  endif
+
+  call s:system('git reset --hard HEAD@{1} && git checkout '.plug#shellescape(g:plugs[name].branch).' --', g:plugs[name].dir)
+  setlocal modifiable
+  normal! "_dap
+  setlocal nomodifiable
+  echo 'Reverted'
+endfunction
+
+function! s:snapshot(force, ...) abort
+  call s:prepare()
+  setf vim
+  call append(0, ['" Generated by vim-plug',
+                \ '" '.strftime("%c"),
+                \ '" :source this file in vim to restore the snapshot',
+                \ '" or execute: vim -S snapshot.vim',
+                \ '', '', 'PlugUpdate!'])
+  1
+  let anchor = line('$') - 3
+  let names = sort(keys(filter(copy(g:plugs),
+        \'has_key(v:val, "uri") && !has_key(v:val, "commit") && isdirectory(v:val.dir)')))
+  for name in reverse(names)
+    let sha = s:git_revision(g:plugs[name].dir)
+    if !empty(sha)
+      call append(anchor, printf("silent! let g:plugs['%s'].commit = '%s'", name, sha))
+      redraw
+    endif
+  endfor
+
+  if a:0 > 0
+    let fn = s:plug_expand(a:1)
+    if filereadable(fn) && !(a:force || s:ask(a:1.' already exists. Overwrite?'))
+      return
+    endif
+    call writefile(getline(1, '$'), fn)
+    echo 'Saved as '.a:1
+    silent execute 'e' s:esc(fn)
+    setf vim
+  endif
+endfunction
+
+function! s:split_rtp()
+  return split(&rtp, '\\\@<!,')
+endfunction
+
+let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))
+let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))
+
+if exists('g:plugs')
+  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))
+  call s:upgrade_specs()
+  call s:define_commands()
+endif
+
+let &cpo = s:cpo_save
+unlet s:cpo_save
-- 
2.30.1.windows.1

